import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useQuery, useMutation } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription } from '@/components/ui/alert';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from '@/components/ui/alert-dialog';
import { useToast } from '@/hooks/use-toast';
import { ExamQuestion } from '@/components/exam/ExamQuestion';
import { ExamNavigationGrid } from '@/components/exam/ExamNavigationGrid';
import { useExamTimer } from '@/hooks/useExamTimer';
import { ExamWithQuestions } from '@/types/exam';
import { AlertCircle, Clock, ChevronRight, ChevronLeft, Send } from 'lucide-react';
import { logger } from '@/lib/logging';

export default function StudentExamAttempt() {
  const { examId } = useParams<{ examId: string }>();
  const navigate = useNavigate();
  const { toast } = useToast();
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [answers, setAnswers] = useState<Record<string, { answer: string; time_spent?: number }>>({});
  const [attemptId, setAttemptId] = useState<string | null>(null);
  const [showSubmitDialog, setShowSubmitDialog] = useState(false);

  // ÿ¨ŸÑÿ® ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿßŸÖÿ™ÿ≠ÿßŸÜ
  const { data: examData, isLoading: examLoading } = useQuery({
    queryKey: ['exam-with-questions', examId],
    queryFn: async () => {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) throw new Error('ÿ∫Ÿäÿ± ŸÖÿµÿ±ÿ≠');

      // ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿØÿßŸÑÿ© ÿ™ŸàŸÑŸäÿØ ÿßŸÑÿ£ÿ≥ÿ¶ŸÑÿ© ÿßŸÑÿ™ŸÑŸÇÿßÿ¶Ÿäÿ©
      const { data, error } = await supabase
        .rpc('generate_exam_questions', {
          p_exam_id: examId,
          p_student_id: user.id
        });

      if (error) throw error;
      return data as any as ExamWithQuestions;
    },
    enabled: !!examId,
  });

  // ÿ•ŸÜÿ¥ÿßÿ° ÿ£Ÿà ÿßÿ≥ÿ™ÿ±ÿ¨ÿßÿπ ŸÖÿ≠ÿßŸàŸÑÿ©
  const createAttemptMutation = useMutation({
    mutationFn: async () => {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) throw new Error('ÿ∫Ÿäÿ± ŸÖÿµÿ±ÿ≠');

      logger.info('üîç ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ Ÿàÿ¨ŸàÿØ ŸÖÿ≠ÿßŸàŸÑÿ© ÿ≥ÿßÿ®ŸÇÿ©...', { examId, userId: user.id });

      // ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ Ÿàÿ¨ŸàÿØ ŸÖÿ≠ÿßŸàŸÑÿ© ÿ≥ÿßÿ®ŸÇÿ©
      const { data: existingAttempt, error: checkError } = await supabase
        .from('exam_attempts')
        .select('*')
        .eq('exam_id', examId!)
        .eq('student_id', user.id)
        .single();

      if (checkError && checkError.code !== 'PGRST116') {
        logger.error('‚ùå ÿÆÿ∑ÿ£ ŸÅŸä ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑŸÖÿ≠ÿßŸàŸÑÿ©', checkError instanceof Error ? checkError : new Error(String(checkError)), { originalError: checkError });
        throw checkError;
      }

      // ÿ•ÿ∞ÿß ŸÉÿßŸÜÿ™ ŸáŸÜÿßŸÉ ŸÖÿ≠ÿßŸàŸÑÿ© ÿ≥ÿßÿ®ŸÇÿ©
      if (existingAttempt) {
        logger.info('‚úÖ ÿ™ŸÖ ÿßŸÑÿπÿ´Ÿàÿ± ÿπŸÑŸâ ŸÖÿ≠ÿßŸàŸÑÿ© ÿ≥ÿßÿ®ŸÇÿ©', { 
          attemptId: existingAttempt.id, 
          status: existingAttempt.status 
        });

        if (existingAttempt.status === 'submitted') {
          logger.warn('‚ö†Ô∏è ÿßŸÑŸÖÿ≠ÿßŸàŸÑÿ© ÿßŸÑÿ≥ÿßÿ®ŸÇÿ© ŸÖŸÉÿ™ŸÖŸÑÿ©');
          throw new Error('ŸÑŸÇÿØ ŸÇŸÖÿ™ ÿ®ÿ™ŸÇÿØŸäŸÖ Ÿáÿ∞ÿß ÿßŸÑÿßŸÖÿ™ÿ≠ÿßŸÜ ŸÖÿ≥ÿ®ŸÇÿßŸã');
        }

        // ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿßŸÑŸÖÿ≠ÿßŸàŸÑÿ© ÿßŸÑÿ≥ÿßÿ®ŸÇÿ© ÿ•ÿ∞ÿß ŸÉÿßŸÜÿ™ ŸÇŸäÿØ ÿßŸÑÿ™ŸÇÿØŸÖ
        logger.info('üîÑ ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿßŸÑŸÖÿ≠ÿßŸàŸÑÿ© ÿßŸÑÿ≥ÿßÿ®ŸÇÿ©');
        return existingAttempt;
      }

      // ÿ•ŸÜÿ¥ÿßÿ° ŸÖÿ≠ÿßŸàŸÑÿ© ÿ¨ÿØŸäÿØÿ©
      logger.info('‚ûï ÿ•ŸÜÿ¥ÿßÿ° ŸÖÿ≠ÿßŸàŸÑÿ© ÿ¨ÿØŸäÿØÿ©...');
      const schoolData = await supabase.from('profiles').select('school_id').eq('user_id', user.id).single();

      const { data, error } = await supabase
        .from('exam_attempts')
        .insert([{
          exam_id: examId!,
          student_id: user.id,
          school_id: schoolData.data?.school_id!,
          status: 'in_progress' as any,
          questions_data: examData?.questions || [],
          answers: {},
        }] as any)
        .select()
        .single();

      if (error) {
        logger.error('‚ùå ŸÅÿ¥ŸÑ ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑŸÖÿ≠ÿßŸàŸÑÿ©', error instanceof Error ? error : new Error(String(error)), { originalError: error });
        throw error;
      }
      
      logger.info('‚úÖ ÿ™ŸÖ ÿ•ŸÜÿ¥ÿßÿ° ŸÖÿ≠ÿßŸàŸÑÿ© ÿ¨ÿØŸäÿØÿ© ÿ®ŸÜÿ¨ÿßÿ≠', { attemptId: data.id });
      return data;
    },
    onSuccess: (data) => {
      setAttemptId(data.id);
      logger.info('‚úÖ ÿ™ŸÖ ÿ™ÿπŸäŸäŸÜ attemptId', { attemptId: data.id });
      
      // ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑÿ•ÿ¨ÿßÿ®ÿßÿ™ ÿßŸÑÿ≥ÿßÿ®ŸÇÿ© ÿ•ÿ∞ÿß ŸÉÿßŸÜÿ™ ŸÖŸàÿ¨ŸàÿØÿ©
      if (data.answers && typeof data.answers === 'object' && Object.keys(data.answers).length > 0) {
        setAnswers(data.answers as Record<string, { answer: string; time_spent?: number }>);
        logger.info('‚úÖ ÿ™ŸÖ ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑÿ•ÿ¨ÿßÿ®ÿßÿ™ ÿßŸÑÿ≥ÿßÿ®ŸÇÿ©', { answersCount: Object.keys(data.answers).length });
      }
    },
    onError: (error: any) => {
      logger.error('üí• ÿÆÿ∑ÿ£ ŸÅŸä createAttemptMutation', error instanceof Error ? error : new Error(String(error)), { originalError: error });
    },
  });

  // ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑŸÖÿ≠ÿßŸàŸÑÿ©
  const updateAttemptMutation = useMutation({
    mutationFn: async (updatedAnswers: Record<string, { answer: string; time_spent?: number }>) => {
      if (!attemptId) return;

      const { error } = await supabase
        .from('exam_attempts')
        .update({
          answers: updatedAnswers,
          time_spent_seconds: (examData?.exam.duration_minutes || 0) * 60 - remainingSeconds,
        })
        .eq('id', attemptId);

      if (error) throw error;
    },
  });

  // ÿ™ŸÇÿØŸäŸÖ ÿßŸÑÿßŸÖÿ™ÿ≠ÿßŸÜ
  const submitExamMutation = useMutation({
    mutationFn: async () => {
      logger.info('üöÄ submitExamMutation.mutationFn ÿ®ÿØÿ£ ÿßŸÑÿ™ŸÜŸÅŸäÿ∞', {
        attemptId,
        answersCount: Object.keys(answers).length,
        answers
      });

      if (!attemptId) {
        logger.error('‚ùå ŸÑÿß ŸäŸàÿ¨ÿØ attemptId', undefined, { attemptId });
        throw new Error('ŸÑÿß ŸäŸàÿ¨ÿØ ŸÖÿ≠ÿßŸàŸÑÿ© ŸÜÿ¥ÿ∑ÿ©');
      }

      logger.info('‚úÖ attemptId ŸÖŸàÿ¨ŸàÿØÿå ÿ≥Ÿäÿ™ŸÖ ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑÿ•ÿ¨ÿßÿ®ÿßÿ™', { attemptId });

      try {
        // ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑÿ•ÿ¨ÿßÿ®ÿßÿ™ ÿ£ŸàŸÑÿßŸã
        logger.info('üîÑ ÿ®ÿØÿ° ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑÿ•ÿ¨ÿßÿ®ÿßÿ™...', { answers });
        await updateAttemptMutation.mutateAsync(answers);
        logger.info('‚úÖ ÿ™ŸÖ ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑÿ•ÿ¨ÿßÿ®ÿßÿ™ ÿ®ŸÜÿ¨ÿßÿ≠');
      } catch (error) {
        logger.error('‚ùå ŸÅÿ¥ŸÑ ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑÿ•ÿ¨ÿßÿ®ÿßÿ™', error instanceof Error ? error : new Error(String(error)), { originalError: error });
        throw error;
      }

      try {
        // ÿ™ŸÇÿØŸäŸÖ ÿßŸÑÿßŸÖÿ™ÿ≠ÿßŸÜ
        logger.info('üîÑ ÿ®ÿØÿ° ÿßÿ≥ÿ™ÿØÿπÿßÿ° submit_exam_attempt...', { attemptId });
        const { data, error } = await supabase
          .rpc('submit_exam_attempt', { p_attempt_id: attemptId });

        if (error) {
          logger.error('‚ùå ÿÆÿ∑ÿ£ ŸÖŸÜ submit_exam_attempt', error instanceof Error ? error : new Error(String(error)), { originalError: error });
          throw error;
        }
        
        logger.info('‚úÖ ÿ™ŸÖ ÿ™ŸÇÿØŸäŸÖ ÿßŸÑÿßŸÖÿ™ÿ≠ÿßŸÜ ÿ®ŸÜÿ¨ÿßÿ≠', { data });
        return data;
      } catch (error) {
        logger.error('‚ùå ŸÅÿ¥ŸÑ ÿ™ŸÇÿØŸäŸÖ ÿßŸÑÿßŸÖÿ™ÿ≠ÿßŸÜ', error instanceof Error ? error : new Error(String(error)), { originalError: error });
        throw error;
      }
    },
    onSuccess: (data) => {
      logger.info('üéâ submitExamMutation.onSuccess', { data });
      toast({
        title: 'ÿ™ŸÖ ÿ™ŸÇÿØŸäŸÖ ÿßŸÑÿßŸÖÿ™ÿ≠ÿßŸÜ',
        description: 'ÿ™ŸÖ ÿ™ŸÇÿØŸäŸÖ ÿ•ÿ¨ÿßÿ®ÿßÿ™ŸÉ ÿ®ŸÜÿ¨ÿßÿ≠',
      });
      navigate(`/student/exam-result/${attemptId}`);
    },
    onError: (error: any) => {
      logger.error('üí• submitExamMutation.onError', error instanceof Error ? error : new Error(String(error)), { 
        originalError: error,
        errorMessage: error?.message,
        errorCode: error?.code,
        errorDetails: error?.details,
        fullError: JSON.stringify(error, null, 2)
      });
      toast({
        title: 'ŸÅÿ¥ŸÑ ÿ™ŸÇÿØŸäŸÖ ÿßŸÑÿßŸÖÿ™ÿ≠ÿßŸÜ',
        description: error?.message || 'ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ÿ™ŸÇÿØŸäŸÖ ÿßŸÑÿßŸÖÿ™ÿ≠ÿßŸÜ',
        variant: 'destructive',
      });
    },
  });

  const { remainingSeconds, formattedTime, isLastFiveMinutes, isTimeUp } = useExamTimer({
    durationMinutes: examData?.exam.duration_minutes || 60,
    onTimeUp: () => {
      toast({
        title: 'ÿßŸÜÿ™ŸáŸâ ÿßŸÑŸàŸÇÿ™',
        description: 'ÿ≥Ÿäÿ™ŸÖ ÿ™ŸÇÿØŸäŸÖ ÿßŸÑÿßŸÖÿ™ÿ≠ÿßŸÜ ÿ™ŸÑŸÇÿßÿ¶ŸäÿßŸã',
        variant: 'destructive',
      });
      submitExamMutation.mutate();
    },
    startImmediately: !!attemptId,
  });

  // ÿ•ŸÜÿ¥ÿßÿ° ŸÖÿ≠ÿßŸàŸÑÿ© ÿπŸÜÿØ ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑÿßŸÖÿ™ÿ≠ÿßŸÜ
  useEffect(() => {
    if (examData && !attemptId && !createAttemptMutation.isPending) {
      createAttemptMutation.mutate();
    }
  }, [examData]);

  // ÿ≠ŸÅÿ∏ ÿßŸÑÿ•ÿ¨ÿßÿ®ÿßÿ™ ÿ™ŸÑŸÇÿßÿ¶ŸäÿßŸã ŸÉŸÑ 30 ÿ´ÿßŸÜŸäÿ©
  useEffect(() => {
    if (!attemptId) return;

    const interval = setInterval(() => {
      updateAttemptMutation.mutate(answers);
    }, 30000);

    return () => clearInterval(interval);
  }, [attemptId, answers]);

  const handleAnswerChange = (questionId: string, answer: string) => {
    setAnswers((prev) => ({
      ...prev,
      [questionId]: { answer, time_spent: 0 },
    }));
  };

  const answeredQuestions = new Set(
    Object.keys(answers).map(id => {
      const index = examData?.questions.findIndex(q => q.id === id);
      return index !== undefined ? index : -1;
    }).filter(idx => idx !== -1)
  );

  const handleSubmitClick = () => {
    logger.info('üî¥üî¥üî¥ handleSubmitClick ÿ™ŸÖ ÿßÿ≥ÿ™ÿØÿπÿßÿ§Ÿá', {
      answeredCount: answeredQuestions.size,
      totalQuestions: examData?.questions.length || 0,
      showSubmitDialog: showSubmitDialog
    });
    
    const unansweredCount = (examData?.questions.length || 0) - answeredQuestions.size;
    
    if (unansweredCount > 0) {
      logger.info('üü° ŸäŸàÿ¨ÿØ ÿ£ÿ≥ÿ¶ŸÑÿ© ÿ∫Ÿäÿ± ŸÖÿ¨ÿßÿ®ÿ©ÿå ŸÅÿ™ÿ≠ ŸÜÿßŸÅÿ∞ÿ© ÿßŸÑÿ™ÿ£ŸÉŸäÿØ', { 
        unansweredCount,
        willOpenDialog: true 
      });
      setShowSubmitDialog(true);
      logger.info('üü¢ ÿ™ŸÖ ÿßÿ≥ÿ™ÿØÿπÿßÿ° setShowSubmitDialog(true)');
    } else {
      logger.info('üü¢ ÿ¨ŸÖŸäÿπ ÿßŸÑÿ£ÿ≥ÿ¶ŸÑÿ© ŸÖÿ¨ÿßÿ®ÿ©ÿå ÿ™ŸÇÿØŸäŸÖ ÿßŸÑÿßŸÖÿ™ÿ≠ÿßŸÜ ŸÖÿ®ÿßÿ¥ÿ±ÿ©');
      submitExamMutation.mutate();
    }
  };

  const handleConfirmSubmit = () => {
    logger.info('ÿ™ÿ£ŸÉŸäÿØ ÿ™ŸÇÿØŸäŸÖ ÿßŸÑÿßŸÖÿ™ÿ≠ÿßŸÜ');
    setShowSubmitDialog(false);
    submitExamMutation.mutate();
  };

  if (examLoading || createAttemptMutation.isPending) {
    return (
      <div className="container mx-auto p-6 flex items-center justify-center min-h-screen">
        <Card className="w-full max-w-md">
          <CardContent className="p-6 text-center">
            <p className="text-lg">ÿ¨ÿßÿ±Ÿä ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑÿßŸÖÿ™ÿ≠ÿßŸÜ...</p>
          </CardContent>
        </Card>
      </div>
    );
  }

  if (!examData || !examData.questions || examData.questions.length === 0) {
    return (
      <div className="container mx-auto p-6">
        <Alert variant="destructive">
          <AlertCircle className="h-4 w-4" />
          <AlertDescription>
            {!examData ? 'ŸÅÿ¥ŸÑ ŸÅŸä ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑÿßŸÖÿ™ÿ≠ÿßŸÜ' : 'ÿßŸÑÿ£ŸÇÿ≥ÿßŸÖ ÿßŸÑŸÖÿ≠ÿØÿØÿ© ŸÅŸä Ÿáÿ∞ÿß ÿßŸÑÿßŸÖÿ™ÿ≠ÿßŸÜ ŸÑÿß ÿ™ÿ≠ÿ™ŸàŸä ÿπŸÑŸâ ÿ£ÿ≥ÿ¶ŸÑÿ©. Ÿäÿ±ÿ¨Ÿâ ÿßŸÑÿßÿ™ÿµÿßŸÑ ÿ®ÿßŸÑŸÖÿπŸÑŸÖ ŸÑÿ•ÿπÿßÿØÿ© ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑÿßŸÖÿ™ÿ≠ÿßŸÜ ŸÖÿπ ÿßÿÆÿ™Ÿäÿßÿ± ÿ£ŸÇÿ≥ÿßŸÖ ÿ™ÿ≠ÿ™ŸàŸä ÿπŸÑŸâ ÿ£ÿ≥ÿ¶ŸÑÿ©.'}
          </AlertDescription>
        </Alert>
        <Button 
          variant="outline" 
          className="mt-4"
          onClick={() => navigate('/student/dashboard')}
        >
          ÿßŸÑÿπŸàÿØÿ© ÿ•ŸÑŸâ ŸÑŸàÿ≠ÿ© ÿßŸÑÿ™ÿ≠ŸÉŸÖ
        </Button>
      </div>
    );
  }

  const currentQuestion = examData.questions[currentQuestionIndex];

  if (!currentQuestion) {
    return (
      <div className="container mx-auto p-6">
        <Alert variant="destructive">
          <AlertCircle className="h-4 w-4" />
          <AlertDescription>ÿÆÿ∑ÿ£ ŸÅŸä ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑÿ≥ÿ§ÿßŸÑ ÿßŸÑÿ≠ÿßŸÑŸä</AlertDescription>
        </Alert>
      </div>
    );
  }

  return (
    <div className="container mx-auto p-3 sm:p-6 max-w-6xl">
      {/* Header */}
      <Card className="mb-4 sm:mb-6">
        <CardHeader className="p-4 sm:p-6">
          <div className="flex items-center justify-between flex-wrap gap-3 sm:gap-4">
            <CardTitle className="text-lg sm:text-2xl">{examData.exam.title}</CardTitle>
            <div className={`flex items-center gap-2 text-base sm:text-lg font-semibold ${isLastFiveMinutes ? 'text-destructive' : ''}`}>
              <Clock className="w-4 h-4 sm:w-5 sm:h-5" />
              <span>{formattedTime}</span>
            </div>
          </div>
        </CardHeader>
      </Card>

      <div className="grid grid-cols-1 lg:grid-cols-4 gap-4 sm:gap-6">
        {/* Navigation Grid */}
        <Card className="lg:col-span-1 order-2 lg:order-1">
          <CardHeader className="p-4">
            <CardTitle className="text-base sm:text-lg">ÿßŸÑÿ£ÿ≥ÿ¶ŸÑÿ©</CardTitle>
          </CardHeader>
          <CardContent className="p-4">
            <ExamNavigationGrid
              totalQuestions={examData.questions.length}
              answeredQuestions={answeredQuestions}
              currentQuestion={currentQuestionIndex}
              onQuestionSelect={setCurrentQuestionIndex}
            />
          </CardContent>
        </Card>

        {/* Question Area */}
        <div className="lg:col-span-3 space-y-4 sm:space-y-6 order-1 lg:order-2">
          <ExamQuestion
            question={{
              id: currentQuestion.id,
              question_text: currentQuestion.question_text,
              question_type: currentQuestion.question_type as 'multiple_choice' | 'true_false' | 'essay',
              choices: currentQuestion.choices?.map(c => ({ text: c.text, value: c.id })),
              points: currentQuestion.points,
            }}
            questionNumber={currentQuestionIndex + 1}
            totalQuestions={examData.questions.length}
            currentAnswer={answers[currentQuestion.id]?.answer}
            onAnswerChange={(answer) => handleAnswerChange(currentQuestion.id, answer)}
          />

          {/* Navigation Buttons */}
          <div className="flex flex-col sm:flex-row items-stretch justify-between gap-3 w-full">
            <div className="flex gap-3 w-full">
              <Button
                variant="outline"
                onClick={() => {
                  logger.info('ÿ≤ÿ± ÿßŸÑÿ≥ÿßÿ®ŸÇ ÿ™ŸÖ ÿßŸÑŸÜŸÇÿ± ÿπŸÑŸäŸá');
                  setCurrentQuestionIndex((prev) => Math.max(0, prev - 1));
                }}
                disabled={currentQuestionIndex === 0}
                className="flex-1 min-h-[48px] text-base font-semibold"
              >
                <ChevronRight className="w-5 h-5 ml-2" />
                ÿßŸÑÿ≥ÿßÿ®ŸÇ
              </Button>

              {currentQuestionIndex < examData.questions.length - 1 && (
                <Button
                  type="button"
                  onClick={(e) => {
                    e.preventDefault();
                    logger.info('ÿ≤ÿ± ÿßŸÑÿ™ÿßŸÑŸä ÿ™ŸÖ ÿßŸÑŸÜŸÇÿ± ÿπŸÑŸäŸá');
                    setCurrentQuestionIndex((prev) => 
                      Math.min(examData.questions.length - 1, prev + 1)
                    );
                  }}
                  className="flex-1 min-h-[48px] text-base font-semibold"
                >
                  ÿßŸÑÿ™ÿßŸÑŸä
                  <ChevronLeft className="w-5 h-5 mr-2" />
                </Button>
              )}
            </div>

            {currentQuestionIndex === examData.questions.length - 1 && (
              <Button
                type="button"
                onClick={() => {
                  logger.info('üî¥üî¥üî¥ ÿ≤ÿ± ÿ™ŸÇÿØŸäŸÖ ÿßŸÑÿßŸÖÿ™ÿ≠ÿßŸÜ ÿ™ŸÖ ÿßŸÑŸÜŸÇÿ± ÿπŸÑŸäŸá', {
                    currentQuestionIndex,
                    totalQuestions: examData.questions.length
                  });
                  handleSubmitClick();
                }}
                disabled={submitExamMutation.isPending}
                className="w-full min-h-[56px] text-base font-bold bg-green-600 hover:bg-green-700 text-white shadow-lg"
              >
                <Send className="w-5 h-5 ml-2" />
                {submitExamMutation.isPending ? 'ÿ¨ÿßÿ±Ÿä ÿßŸÑÿ™ÿ≥ŸÑŸäŸÖ...' : 'ÿ™ŸÇÿØŸäŸÖ ÿßŸÑÿßŸÖÿ™ÿ≠ÿßŸÜ'}
              </Button>
            )}
          </div>

          {/* Progress Info */}
          <Alert>
            <AlertDescription>
              ÿ™ŸÖ ÿßŸÑÿ•ÿ¨ÿßÿ®ÿ© ÿπŸÑŸâ {answeredQuestions.size} ŸÖŸÜ {examData.questions.length} ÿ≥ÿ§ÿßŸÑ
            </AlertDescription>
          </Alert>
        </div>
      </div>

      {/* Submit Confirmation Dialog */}
      <AlertDialog 
        open={showSubmitDialog} 
        onOpenChange={(open) => {
          logger.info('üîµ AlertDialog onOpenChange:', { open });
          setShowSubmitDialog(open);
        }}
      >
        <AlertDialogContent className="max-w-[90vw] sm:max-w-md z-[100]">
          <AlertDialogHeader>
            <AlertDialogTitle className="text-base sm:text-lg">ÿ™ÿ£ŸÉŸäÿØ ÿ™ŸÇÿØŸäŸÖ ÿßŸÑÿßŸÖÿ™ÿ≠ÿßŸÜ</AlertDialogTitle>
            <AlertDialogDescription className="text-sm sm:text-base">
              ŸÑŸÖ ÿ™ÿ¨ÿ® ÿπŸÑŸâ {(examData?.questions.length || 0) - answeredQuestions.size} ÿ≥ÿ§ÿßŸÑ.
              ŸáŸÑ ÿ£ŸÜÿ™ ŸÖÿ™ÿ£ŸÉÿØ ŸÖŸÜ ÿ£ŸÜŸÉ ÿ™ÿ±ŸäÿØ ÿ™ŸÇÿØŸäŸÖ ÿßŸÑÿßŸÖÿ™ÿ≠ÿßŸÜ ÿßŸÑÿ¢ŸÜÿü
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter className="flex-col sm:flex-row gap-2">
            <AlertDialogCancel 
              className="w-full sm:w-auto"
              onClick={() => logger.info('üî¥ ÿ™ŸÖ ÿßŸÑŸÜŸÇÿ± ÿπŸÑŸâ ÿ•ŸÑÿ∫ÿßÿ°')}
            >
              ÿ•ŸÑÿ∫ÿßÿ°
            </AlertDialogCancel>
            <AlertDialogAction 
              onClick={handleConfirmSubmit}
              className="w-full sm:w-auto bg-green-600 hover:bg-green-700"
            >
              ŸÜÿπŸÖÿå ŸÇÿØŸÖ ÿßŸÑÿßŸÖÿ™ÿ≠ÿßŸÜ
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </div>
  );
}
